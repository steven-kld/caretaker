from flask import Flask, request, jsonify, Response, session
from flask_cors import CORS
import os, uuid, openai
from concurrent.futures import ThreadPoolExecutor
from pathlib import Path
from dotenv import load_dotenv

from utils.logging import LogManager
from core.faiss_matcher import FaissMatcher, MatchStatus
from core.session_manager import SessionManager
from core.process_manager import ProcessManager

APP_FOLDER = os.path.dirname(os.path.abspath(__file__))

app = Flask(__name__)
CORS(app)
app.secret_key = os.getenv("FLASK_SECRET_KEY")

log_manager = LogManager()

faiss_matcher = FaissMatcher(
    index_path=Path("./model/vector/task_index.faiss"),
    meta_path=Path("./model/vector/task_meta.json")
)

@app.route("/api/session/init", methods=['GET'])
def init_session():
    SessionManager.clear_expired_sessions()

    if not session.get('user_id'):
        session['user_id'] = str(uuid.uuid4())
    user_id = session['user_id']

    logger = log_manager.get_session_logger(user_id)
    SessionManager.init_session(user_id, logger)

    logger.info(f"üÜï Session initialized and logger attached for uuid {user_id}")
    return jsonify({"ok": "hello dear", "session_id": user_id})

@app.route('/api/process', methods=['POST'])
def process():
    try:
        # --- Always needed preparations ---
        session_id, logger = ProcessManager.prepare_session(session)
        if not session_id:
            return jsonify({'error': logger}), 400

        openai_client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

        query, error = ProcessManager.transcribe_audio(openai_client, logger)
        if not query:
            return jsonify({'error': error}), 400
        
        logger.info(f"Received user input: {query}")

        # --- Matching and task handling ---
        match_result = faiss_matcher.process(session_id, query, openai_client, logger)

        # --- Generate final response ---
        mp3_data = generate_response(
            openai_client,
            query,
            session_id,
            logger,
            match_result
        )

        logger.log_time("ü§ñ GPT + TTS")

        if not mp3_data:
            return jsonify({'error': 'TTS failed'}), 500

        return Response(mp3_data, mimetype="audio/mpeg")

    except Exception as e:
        logger.error("‚ùå process failed:", e)
        return jsonify({'error': str(e)}), 500

def generate_speech(openai_client, text, voice="nova"):
    try:
        response = openai_client.audio.speech.create(
            model="tts-1",
            voice=voice,
            input=text
        )
        return response.content

    except Exception as e:
        print("‚ùå TTS failed:", e)
        return None
    

def generate_response(openai_client, query, session_id, logger, match_result):
    try:
        history = SessionManager.get_history(session_id)

        system_prompt = (
            "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ. "
            "–û—Ç–≤–µ—á–∞–π –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø—Ä–æ—Å—Ç–æ ‚Äî 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. "
            "–ù–∏–∫–∞–∫–∏—Ö –ª–∏—à–Ω–∏—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, –Ω–∏–∫–∞–∫–∏—Ö —Å–ª–æ–∂–Ω—ã—Ö —Ñ—Ä–∞–∑."
        )

        messages = [{"role": "system", "content": system_prompt}]

        if history:
            history_text = "\n".join(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {h['text']}\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {h['reply']}" for h in history
            )
            messages.append({"role": "system", "content": f"–ò—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è:\n{history_text}"})

        # --- Three paths based on match result ---
        if match_result.status == MatchStatus.MATCHED and match_result.step:
            # ‚úÖ Matched step: use step full text
            user_content = (
                f"–¢–µ–∫—É—â–∏–π —à–∞–≥:\n{match_result.step.get('text', '')}\n\n"
                f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{query}"
            )
            messages.append({"role": "user", "content": user_content})

        elif match_result.status == MatchStatus.NO_STEP_MATCH and match_result.task:
            # ‚úÖ Matched task but no step: list steps
            steps = match_result.task.get('steps', [])
            steps_list = "\n".join(
                f"- {step.get('text', '').strip()}" for step in steps
            )
            user_content = (
                f"–ï—Å—Ç—å —Ç–∞–∫–∏–µ —à–∞–≥–∏:\n{steps_list}\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª:\n{query}\n\n"
                "–ü–æ–º–æ–≥–∏ –≤—ã–±—Ä–∞—Ç—å —à–∞–≥. –û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤."
            )
            messages.append({"role": "user", "content": user_content})

        elif match_result.status == MatchStatus.NO_TASK_MATCH:
            # ‚ùå No task matched
            reply = "–Ø –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."
            SessionManager.save_history(session_id, query, reply)
            return generate_speech(openai_client, reply)

        # --- Call GPT ---
        logger.info("RESPONSE PROMPT")
        logger.info(messages)

        chat = openai_client.chat.completions.create(
            model="gpt-4o",
            messages=messages
        )
        logger.log_time("üß† GPT")

        full_reply = chat.choices[0].message.content.strip()

        if not full_reply or len(full_reply) < 10:
            full_reply = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ."

        SessionManager.save_history(session_id, query, full_reply)

        with ThreadPoolExecutor(max_workers=1) as executor:
            future = executor.submit(generate_speech, openai_client, full_reply)
            mp3_data = future.result()
            logger.log_time("üîä TTS")

        return mp3_data

    except Exception as e:
        logger.error("‚ùå GPT or TTS error:", e)
        return None

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=9091, debug=True)
